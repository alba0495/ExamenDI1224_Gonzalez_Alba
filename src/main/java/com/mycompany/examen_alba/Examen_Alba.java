/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.examen_alba;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartUtils;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.layout.element.Image;
import java.awt.BasicStroke;
import javax.swing.*;
import java.io.*;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.ui.RectangleAnchor;
import org.jfree.chart.ui.TextAnchor;
/**
 *
 * @author Alba
 */
public class Examen_Alba extends javax.swing.JFrame {
    private static final String rutaExcel = "notas_alumnos.xlsx";
           
        String[] clase1 = {"James", "Anthony", "Austin", "Kevis"};
        String[] clase2 = {"Stephen", "Klay", "Davis", "Andrew"};
    
    public Examen_Alba() {
        initComponents();
        setLocationRelativeTo(null);
        jComboBoxClase.addActionListener(e -> actualizarAlumnos());

        this.setTitle("Gestor Alumnos");
        
        jComboBoxClase.addItem("Clase 1");
        jComboBoxClase.addItem("Clase 2");
        
        
        setMinimumSize(this.getSize());
        setSize(350, 350);
        cargarAlumnos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        examenDI_1224_Alba1 = new com.mycompany.examen_Alba.ExamenDI_1224_Alba();
        examenDI_1224_Alba2 = new com.mycompany.examen_Alba.ExamenDI_1224_Alba();
        examenDI_1224_Alba3 = new com.mycompany.examen_Alba.ExamenDI_1224_Alba();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxClase = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxAlumnos = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinnerMatematicas = new javax.swing.JSpinner();
        jSpinnerFisica = new javax.swing.JSpinner();
        jSpinnerQuimica = new javax.swing.JSpinner();
        jSpinnerLengua = new javax.swing.JSpinner();
        jButtonAñadirNotas = new javax.swing.JButton();
        jButtonGenerarPDF = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Clase");

        jComboBoxClase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Alumno");

        jComboBoxAlumnos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("NOTAS");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Matematicas");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Fisica");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Quimica");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Lengua");

        jButtonAñadirNotas.setBackground(new java.awt.Color(0, 0, 0));
        jButtonAñadirNotas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAñadirNotas.setText("Añadir Nota");
        jButtonAñadirNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAñadirNotasActionPerformed(evt);
            }
        });

        jButtonGenerarPDF.setBackground(new java.awt.Color(0, 0, 0));
        jButtonGenerarPDF.setForeground(new java.awt.Color(255, 255, 255));
        jButtonGenerarPDF.setText("Crear PDF");
        jButtonGenerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxClase, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(78, 78, 78)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerQuimica, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerLengua, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSpinnerFisica, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSpinnerMatematicas, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonAñadirNotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonGenerarPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(32, 32, 32))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBoxClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButtonAñadirNotas)
                        .addGap(44, 44, 44)
                        .addComponent(jButtonGenerarPDF)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSpinnerMatematicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jSpinnerFisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addComponent(jSpinnerQuimica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinnerLengua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addGap(42, 42, 42))
        );

        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));

        jMenu1.setBackground(new java.awt.Color(51, 51, 51));
        jMenu1.setForeground(new java.awt.Color(0, 0, 0));
        jMenu1.setText("File");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("Notas 1");
        jMenu1.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setSelected(true);
        jRadioButtonMenuItem2.setText("ventana");
        jMenu1.add(jRadioButtonMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(51, 51, 51));
        jMenu2.setForeground(new java.awt.Color(0, 0, 0));
        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void actualizarAlumnos() {
        String clase = (String) jComboBoxClase.getSelectedItem();

        jComboBoxAlumnos.removeAllItems(); 

        if (clase.equals("Clase 1")) {
            for (String alumno : clase1) {
                jComboBoxAlumnos.addItem(alumno);
            }
        } else if (clase.equals("Clase 2")) {
            for (String alumno : clase2) {
                jComboBoxAlumnos.addItem(alumno);
            }
        }
    }
    
    private void jButtonAñadirNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAñadirNotasActionPerformed
      
            String alumnoSeleccionado = (String) jComboBoxAlumnos.getSelectedItem();
            if (alumnoSeleccionado == null || alumnoSeleccionado.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, selecciona un alumno.");
                return;
            }

            // Obtener las notas de los spinners
            Integer[] notas = new Integer[4];
            notas[0] = (Integer) jSpinnerMatematicas.getValue();
            notas[1] = (Integer) jSpinnerFisica.getValue();
            notas[2] = (Integer) jSpinnerQuimica.getValue();
            notas[3] = (Integer) jSpinnerLengua.getValue();

            // Añadir las notas al Excel
            añadirNotasAExcel(alumnoSeleccionado, notas);
        
    }//GEN-LAST:event_jButtonAñadirNotasActionPerformed

    private void jButtonGenerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarPDFActionPerformed
        String alumnoSeleccionado = (String) jComboBoxAlumnos.getSelectedItem();
        if (alumnoSeleccionado == null || alumnoSeleccionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un alumno.");
            return;
        }

        // Lee las notas desde el Excel
        double[] notas = leerNotasDesdeExcel(alumnoSeleccionado);

        if (notas.length == 0) {
            JOptionPane.showMessageDialog(this, "No hay notas disponibles para este alumno.");
            return;
        }

        // Calcula promedio de las notas
        double promedio = calcularPromedio(notas);

        // Crea gráfico
        String[] asignaturas = {"Matemáticas", "Física", "Química", "Lengua"};
        String rutaGrafico = "grafico_" + alumnoSeleccionado + ".jpg";
        crearGraficoNotas("Notas de " + alumnoSeleccionado, asignaturas, notas, rutaGrafico);

        // Verifica si el gráfico se ha creado
        File archivoGrafico = new File(rutaGrafico);
        if (!archivoGrafico.exists()) {
            JOptionPane.showMessageDialog(this, "Error al crear el gráfico.");
            return;
        }

        // Genera PDF
        String rutaPDF = "notas_" + alumnoSeleccionado + ".pdf";
        generarPDFAlumno(rutaPDF, alumnoSeleccionado, promedio, rutaGrafico);

    }//GEN-LAST:event_jButtonGenerarPDFActionPerformed

 

   private void cargarAlumnos() {
        String nombreHojaClase1 = "Clase 1";
        String nombreHojaClase2 = "Clase 2";
        File archivo = new File(rutaExcel);
        Workbook libroTrabajo;
        try {
            if (!archivo.exists()) {
                // Crea un nuevo archivo Excel si no existe
                libroTrabajo = new XSSFWorkbook();

                // Crea hoja para Clase 1
                Sheet hojaClase1 = libroTrabajo.createSheet(nombreHojaClase1);
                crearEncabezados(hojaClase1);
                agregarAlumnos(hojaClase1, clase1);

                // Crea hoja para Clase 2
                Sheet hojaClase2 = libroTrabajo.createSheet(nombreHojaClase2);
                crearEncabezados(hojaClase2);
                agregarAlumnos(hojaClase2, clase2);

                // Guarda el archivo
                FileOutputStream fileOut = new FileOutputStream(archivo);
                libroTrabajo.write(fileOut);
                fileOut.close();
                libroTrabajo.close();
            }

            // Abre el archivo existente
            libroTrabajo = WorkbookFactory.create(new FileInputStream(archivo));

            cargarAlumnosDesdeHoja(libroTrabajo.getSheet(nombreHojaClase1));
            cargarAlumnosDesdeHoja(libroTrabajo.getSheet(nombreHojaClase2));

            libroTrabajo.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar alumnos: " + e.getMessage());
        }
    }

    private void crearEncabezados(Sheet hoja) {
        Row fila = hoja.createRow(0);
        String[] encabezados = {"Alumno", "Matemáticas", "Física", "Química", "Lengua", "Media Alumno"};
        for (int i = 0; i < encabezados.length; i++) {
            Cell celda = fila.createCell(i);
            celda.setCellValue(encabezados[i]);
        }
    }

    private void agregarAlumnos(Sheet hoja, String[] alumnos) {
        for (int i = 0; i < alumnos.length; i++) {
            Row fila = hoja.createRow(i + 1);
            Cell celda = fila.createCell(0);
            celda.setCellValue(alumnos[i]);


        // Calcula la media por asignatura
        Row filaMediaAsignaturas = hoja.createRow(alumnos.length + 1);
        Cell celdaTituloMedia = filaMediaAsignaturas.createCell(0);
        celdaTituloMedia.setCellValue("Media Asignatura");
        
        for (int j = 1; j <= 4; j++) {
            Cell celdaMediaAsignatura = filaMediaAsignaturas.createCell(j);
            celdaMediaAsignatura.setCellFormula("AVERAGE(" + (char) ('A' + j) + "2:" + (char) ('A' + j) + (alumnos.length + 1) + ")");
            }
        }
    }

    private void cargarAlumnosDesdeHoja(Sheet hoja) {
        if (hoja != null) {
            for (int i = 1; i <= hoja.getLastRowNum(); i++) {
                Row row = hoja.getRow(i);
                if (row != null) {
                    String alumno = row.getCell(0).getStringCellValue();
                    jComboBoxAlumnos.addItem(alumno);
                }
            }
        }
    }


    // ---------------- METODOS ----------------

    // Añade o actualiza notas en Excel
    private void añadirNotasAExcel(String alumno, Integer[] notas) {
         try {
            FileInputStream fileInputStream = new FileInputStream(rutaExcel);
            Workbook workbook = new XSSFWorkbook(fileInputStream);

            // Determina la hoja según la clase seleccionada
            String claseSeleccionada = (String) jComboBoxClase.getSelectedItem();
            Sheet sheet = workbook.getSheet(claseSeleccionada);

            if (sheet == null) {
                JOptionPane.showMessageDialog(this, "La hoja para " + claseSeleccionada + " no existe.");
                return;
            }

            boolean alumnoEncontrado = false;

            // Busca el alumno 
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row != null && row.getCell(0).getStringCellValue().equals(alumno)) {
                    alumnoEncontrado = true;

                    // Añadr las notas 
                    for (int j = 0; j < notas.length; j++) {
                        Cell celda = row.getCell(j + 1);
                        if (celda == null) {
                            celda = row.createCell(j + 1);
                        }
                        celda.setCellValue(notas[j]);
                    }

                    // Calcula la media
                    double media = 0;
                    for (int j = 0; j < notas.length; j++) {
                        media += notas[j];
                    }
                    media /= notas.length;

                    // Añade la media 
                    Cell celdaMedia = row.getCell(5);
                    if (celdaMedia == null) {
                        celdaMedia = row.createCell(5);
                    }
                    celdaMedia.setCellValue(media);

                    break;
                }
            }

            // Si el alumno no existe, agregarlo al final
            if (!alumnoEncontrado) {
                int nuevaFila = sheet.getLastRowNum() + 1;
                Row nuevaRow = sheet.createRow(nuevaFila);
                nuevaRow.createCell(0).setCellValue(alumno);

                // Añade las notas
                for (int j = 0; j < notas.length; j++) {
                    nuevaRow.createCell(j + 1).setCellValue(notas[j]);
                }

                // Calcula la media
                double media = 0;
                for (int j = 0; j < notas.length; j++) {
                    media += notas[j];
                }
                media /= notas.length;

                // Añade la media 
                nuevaRow.createCell(5).setCellValue(media);
            }

            // Guarda los cambios
            FileOutputStream fileOut = new FileOutputStream(rutaExcel);
            workbook.write(fileOut);
            fileOut.close();
            workbook.close();

            JOptionPane.showMessageDialog(this, "Notas añadidas correctamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al añadir notas: " + e.getMessage());
        }
    }

    // Lee notas desde Excel
   private double[] leerNotasDesdeExcel(String alumno) {
        try {
            FileInputStream fileInputStream = new FileInputStream(rutaExcel);
            Workbook workbook = new XSSFWorkbook(fileInputStream);

            String claseSeleccionada = (String) jComboBoxClase.getSelectedItem();
            Sheet sheet = workbook.getSheet(claseSeleccionada);

            if (sheet != null) {
                for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                    Row row = sheet.getRow(i);
                    if (row != null && row.getCell(0).getStringCellValue().equals(alumno)) {
                        double[] notas = new double[row.getLastCellNum() - 1];
                        for (int j = 1; j < row.getLastCellNum(); j++) {
                            notas[j - 1] = row.getCell(j).getNumericCellValue();
                        }
                        workbook.close();
                        return notas;
                    }
                }
            }
            workbook.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al leer notas: " + e.getMessage());
        }
        return new double[0];
    }

    // Calcula promedio de notas
    private double calcularPromedio(double[] notas) {
        double suma = 0;
        for (double nota : notas) {
            suma += nota;
        }
        return notas.length > 0 ? suma / notas.length : 0;
    }

    // Crea graficos
    private void crearGraficoNotas(String titulo, String[] asignaturas, double[] notas, String rutaGrafico) {
        try {
            // Crear dataset para el gráfico de barras
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            double sumaNotas = 0;

            for (int i = 0; i < asignaturas.length; i++) {
                dataset.addValue(notas[i], "Notas", asignaturas[i]);
                sumaNotas += notas[i];
            }

            // Calcular la media
            double media = sumaNotas / notas.length;

            // Crear el gráfico de barras
            JFreeChart grafico = ChartFactory.createBarChart(
                titulo,
                "Asignaturas",
                "Notas",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false
            );

            // Añadir la línea de la media
            CategoryPlot plot = grafico.getCategoryPlot();
            ValueMarker marcadorMedia = new ValueMarker(media);
            marcadorMedia.setStroke(new BasicStroke(2.0f));
            marcadorMedia.setLabel("Media: " + String.format("%.2f", media));
            marcadorMedia.setLabelAnchor(RectangleAnchor.TOP_LEFT);
            marcadorMedia.setLabelTextAnchor(TextAnchor.BOTTOM_LEFT);
            plot.addRangeMarker(marcadorMedia);
            // Configura el renderer para la línea de media
            LineAndShapeRenderer lineRenderer = new LineAndShapeRenderer();
            lineRenderer.setSeriesPaint(0, java.awt.Color.RED); // Color de la línea de media
            plot.setRenderer(1, lineRenderer);
            
            // Guardar el gráfico como imagen
            ChartUtils.saveChartAsJPEG(new File(rutaGrafico), grafico, 800, 600);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al crear gráfico: " + e.getMessage());
        }
    }


    // Genera un PDF con las notas y el gráfico
    private void generarPDFAlumno(String rutaPDF, String alumno, double promedio, String rutaGrafico) {
        try {
            PdfWriter writer = new PdfWriter(rutaPDF);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            document.add(new Paragraph("Notas de " + alumno).setBold().setFontSize(16));
            document.add(new Paragraph("Promedio: " + String.format("%.2f", promedio)));

            ImageData imageData = ImageDataFactory.create(rutaGrafico);
            Image image = new Image(imageData).scaleToFit(500, 300);
            document.add(image);

            document.close();
            JOptionPane.showMessageDialog(this, "PDF generado correctamente en: " + rutaPDF);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
     
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Examen_Alba().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mycompany.examen_Alba.ExamenDI_1224_Alba examenDI_1224_Alba1;
    private com.mycompany.examen_Alba.ExamenDI_1224_Alba examenDI_1224_Alba2;
    private com.mycompany.examen_Alba.ExamenDI_1224_Alba examenDI_1224_Alba3;
    private javax.swing.JButton jButtonAñadirNotas;
    private javax.swing.JButton jButtonGenerarPDF;
    private javax.swing.JComboBox<String> jComboBoxAlumnos;
    private javax.swing.JComboBox<String> jComboBoxClase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JSpinner jSpinnerFisica;
    private javax.swing.JSpinner jSpinnerLengua;
    private javax.swing.JSpinner jSpinnerMatematicas;
    private javax.swing.JSpinner jSpinnerQuimica;
    // End of variables declaration//GEN-END:variables
}
